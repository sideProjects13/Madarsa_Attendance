name: Build and Distribute to Firebase

on:
  push:
    branches:
      - master # Changed from main to master to match your original file
  workflow_dispatch:

jobs:
  build-and-distribute:
    runs-on: ubuntu-latest

    steps:
      # 1. Checks-out your repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Sets up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # 3. Grants execute permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # =================================================================
      # START: NEW STEP TO DECODE KEYSTORE
      # This step takes the Base64 string from GitHub Secrets and decodes it
      # back into a .jks file that Gradle can use.
      - name: Decode Keystore
        id: decode_keystore
        run: |
          keystore_path="${{ runner.temp }}/keystore.jks"
          echo "${{ secrets.RELEASE_KEYSTORE }}" | base64 --decode > $keystore_path
          echo "keystore_path=$keystore_path" >> $GITHUB_OUTPUT
        # This 'if' condition ensures this step only runs if the secret exists.
        # This prevents the workflow from failing on forks of your repository.
        if: ${{ secrets.RELEASE_KEYSTORE != '' }}
      # END: NEW STEP TO DECODE KEYSTORE
      # =================================================================

      # 4. Builds a SIGNED release APK
      - name: Build with Gradle
        run: ./gradlew assembleRelease
        # =================================================================
        # START: NEW ENV BLOCK
        # This 'env' block creates the environment variables that your
        # build.gradle.kts file is configured to read.
        env:
          RELEASE_STORE_FILE: ${{ steps.decode_keystore.outputs.keystore_path }}
          RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        if: ${{ secrets.RELEASE_KEYSTORE != '' }}
        # END: NEW ENV BLOCK
        # =================================================================

      # 5. Authenticates with Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_CREDENTIALS }}
        if: ${{ secrets.RELEASE_KEYSTORE != '' }}

      # 6. Uploads the signed APK to Firebase App Distribution
      - name: Upload artifact to Firebase App Distribution
        run: |
          # Install Firebase CLI
          npm install -g firebase-tools
          
          # Distribute the SIGNED APK. Note the path has changed.
          # The signed APK is named 'app-release.apk', not 'app-release-unsigned.apk'.
          firebase appdistribution:distribute app/build/outputs/apk/release/app-release.apk \
            --app "${{ secrets.FIREBASE_APP_ID }}" \
            --release-notes "Build from commit ${{ github.sha }}" \
            --groups "qa-testers"
        if: ${{ secrets.RELEASE_KEYSTORE != '' }}